'''
generic.py

'''
from urllib import urlencode

from core.data.options.option import option
from core.data.options.optionList import optionList
from core.controllers.basePlugin.baseAuthPlugin import baseAuthPlugin
from core.controllers.w3afException import w3afException
from core.data.parsers.urlParser import url_object


class generic(baseAuthPlugin):
    '''Generic auth plugin.'''

    def __init__(self):
        baseAuthPlugin.__init__(self)
        self.username = None
        self.password = None
        self.username_field = None
        self.password_field = None
        self.auth_url = None
        self.check_url = None
        
    def login(self):
        '''User login.'''
        try:
            # TODO Why we don't use httpPostDataRequest here?
            self._urlOpener.POST(self.auth_url, urlencode({
                self.username_field: self.username,
                self.password_field: self.password,
            }))
            return self.is_logged()
        except Exception, e:
            return False

    def logout(self):
        '''User login.'''
        return None

    def is_logged(self):
        '''Check user session.'''
        try:
            body = self._urlOpener.GET(self.check_url).body
            return self.username in body
        except Exception:
            return False
   
    def getOptions(self):
        '''
        @return: A list of option objects for this plugin.
        '''

        d1 = 'Username'
        o1 = option('username', self.username, d1, 'string')
        
        d2 = 'Password'
        o2 = option('password', self.password, d2, 'string')
 
        d3 = 'Username field'
        o3 = option('username_field', self.username_field, d3, 'string')
        
        d4 = 'Password field'
        o4 = option('password_field', self.password_field, d4, 'string')
               
        d5 = 'Auth URL - URL for POSTing auth information'
        o5 = option('auth_url', self.auth_url, d5, 'string')

        d6 = 'Check session URL - URL in which response body username will be searched'
        o6 = option('check_url', self.check_url, d6, 'string')

        ol = optionList()
        ol.add(o1)
        ol.add(o2)
        ol.add(o3)
        ol.add(o4)
        ol.add(o5)
        ol.add(o6)
        return ol

    def setOptions(self, optionsMap):
        '''
        This method sets all the options that are configured using 
        the user interface generated by the framework using 
        the result of getOptions().
        
        @parameter optionsMap: A dict with the options for the plugin.
        @return: No value is returned.
        ''' 
        self.username = optionsMap['username'].getValue()
        self.password = optionsMap['password'].getValue()
        self.username_field = optionsMap['username_field'].getValue()
        self.password_field = optionsMap['password_field'].getValue()
        try:
            self.auth_url = url_object(optionsMap['auth_url'].getValue())
            self.check_url = url_object(optionsMap['check_url'].getValue())
        except:
            msg = 'Please enter a valid auth_url/check_url values'
            raise w3afException(msg)

    def getPluginDeps(self):
        '''
        @return: A list with the names of the plugins that should be runned 
        before the current one.
        '''
        return []

    def getLongDesc(self):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This auth plugin can logging in to generic-passport
        
        Three configurable parameters exist:
            - username
            - password
            - username_field
            - password_field
            - auth_url
            - check_url
        '''


