'''
xss.py

Copyright 2006 Andres Riancho

This file is part of w3af, w3af.sourceforge.net .

w3af is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 2 of the License.

w3af is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with w3af; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

'''
from __future__ import with_statement

import core.controllers.outputManager as om

# options
from core.data.options.option import option
from core.data.options.optionList import optionList

from core.controllers.basePlugin.baseAuditPlugin import baseAuditPlugin
from core.data.fuzzer.fuzzer import createMutants, createRandAlNum
from core.controllers.w3afException import w3afException

import core.data.kb.knowledgeBase as kb
import core.data.kb.vuln as vuln
import core.data.constants.severity as severity

import core.data.constants.browsers as browsers

from selenium import selenium
from core.data.parsers.urlParser import getPathQs

class selDomXss(baseAuditPlugin):

    def __init__(self):
        baseAuditPlugin.__init__(self)

    def audit(self, freq ):
        '''
        Tests an URL for XSS vulnerabilities.

        @param freq: A fuzzableRequest
        '''
        self.sel = selenium("localhost", 4444, "*chrome", "http://localhost/")
        self.sel.start()

        if freq.getMethod() != 'GET':
            return

        fake_mutants = createMutants( freq , ['', ] )
        for mutant in fake_mutants:
            self._search_dom_xss(mutant)

        self.sel.stop()

    def _search_dom_xss(self, mutant):
        # Get the strings only
        rnd_value = createRandAlNum(4)
        mutant_list = createMutants(mutant.getFuzzableReq(),
                ['<script>document.write("RANDOMIZE")</script>'.replace( "RANDOMIZE", rnd_value)],
                fuzzableParamList=[mutant.getVar(),])

        for mutant in mutant_list:
            if self._hasNoBug( 'domxss' , 'domxss', mutant.getURL() , mutant.getVar() ):
                self.sel.open(getPathQs(mutant.getURI()))
                if self.sel.is_text_present(rnd_value):
                    print 'DOM XSS is found!'
        self._tm.join( self )

    def _analyzeResult( self, mutant, response ):
        pass

    def end( self ):
        '''
        This method is called to check for permanent Xss. 
        Many times a xss aint on the page we get after the GET/POST of the xss string.
        This method searches for the xss string on all the pages that are available.
        
        @return: None, vulns are saved to the kb.
        '''
        self._tm.join( self )
        self.printUniq( kb.kb.getData( 'domxss', 'domxss' ), 'VAR' )

    def getOptions( self ):
        '''
        @return: A list of option objects for this plugin.
        '''
        ol = optionList()
        return ol
        
    def setOptions( self, optionsMap ):
        '''
        This method sets all the options that are configured using the user interface 
        generated by the framework using the result of getOptions().
        @parameter OptionList: A dictionary with the options for the plugin.
        @return: No value is returned.
        '''
        pass

    def getPluginDeps( self ):
        '''
        @return: A list with the names of the plugins that should be runned before the
        current one.
        '''
        return []

    def getLongDesc( self ):
        '''
        @return: A DETAILED description of the plugin functions and features.
        '''
        return '''
        This plugin finds DOMXSS vulnerabilities.
        '''
